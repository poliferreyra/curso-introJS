// coercion implicita



// los operadores -, *, / esperan n√∫meros, entonces JS convierte el string '25' a n√∫mero autom√°ticamente.
// El + es el √∫nico que concatena si hay un string, por eso es diferente.

// Que deberia usar para convertir el texto a numero
// Mostrar el tipo de dato con typeof antes y despu√©s.


// Si alguno de los operandos es una cadena (string), el + concatena (une) en lugar de sumar.
// Si ambos son n√∫meros, el + suma.
// JS convierte el 5 a string porque concatenar es m√°s com√∫n que querer sumar un n√∫mero con texto.

// coercion explicita



// usen parseInt() o parseFloat() y vean la diferencia.

//DIFERENCIAS ENTRE NUMBER() PARSEINT() PARSEFLOAT()
// M√©todo	¬øQu√© hace?	Ejemplo	Resultado
// Number()	Convierte todo el string a n√∫mero. Si hay algo raro, da NaN.	Number('25.5')	25.5
// parseInt()	Lee hasta donde haya n√∫meros enteros. Si hay letras, corta ah√≠.	parseInt('25px')	25
// parseFloat()	Lee n√∫meros con decimales. Si hay letras, corta ah√≠.	parseFloat('25.5px')	25.5

console.log(Number("25.5px"));
console.log(parseInt("25.5px"));
console.log(parseFloat("25.5px"));

console.log(Number("hola"));
console.log(parseInt("hola"));
console.log(parseFloat("hola"));

// üß† Casos clave donde te sirve cada uno:

// Number() ‚Üí Si sab√©s que el string deber√≠a ser un n√∫mero puro (sin unidades, sin cosas raras).
// parseInt() ‚Üí Si esper√°s n√∫meros enteros y tal vez vengan con algo m√°s ('100px').
// parseFloat() ‚Üí Si esper√°s n√∫meros con decimales y pueden venir con algo m√°s ('12.5kg').

let edad = '25';
let aniosFaltantes = 5;

// Corregido con Number()
console.log(Number(edad) + aniosFaltantes);

// Tambi√©n servir√≠a parseInt()
console.log(parseInt(edad) + aniosFaltantes);

// Pero como edad es "limpio", todos dan igual ac√°
console.log(parseFloat(edad) + aniosFaltantes);