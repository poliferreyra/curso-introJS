// La coersion permite convertir un tipo de dato en otro
// Coersion implicita y explicita
// Implicita: la hace JS - JS gestiona las conversiones
// Explicita: la haces vos

// coercion implicita
console.log(5 + "m");
console.log("10" - 5);
console.log("5" * 2);
console.log("20" / "4");
console.log("hola" * 3);

// los operadores (-), (*), (/) esperan n√∫meros, entonces JS convierte el string '5', por ej, a n√∫mero autom√°ticamente.
// El (+) es el √∫nico que concatena si hay un string, por eso es diferente.

// Si alguno de los operandos es una cadena (string), el (+) concatena - une - en lugar de sumar.
// Si ambos son n√∫meros, el (+) suma.
// JS convierte el 5 a string porque concatenar es m√°s com√∫n que querer sumar un n√∫mero con texto.

// coercion explicita
// Que deberia usar para convertir el texto a numero
let edadusuario = parseInt("25.5");
console.log(typeof edadusuario);

//DIFERENCIAS ENTRE NUMBER() PARSEINT() PARSEFLOAT()
// Number()	Convierte todo el string a n√∫mero. Si hay algo raro, da NaN.	Number('25.5') ->	25.5
// parseInt() Lee hasta donde haya n√∫meros enteros. Si hay letras, corta ah√≠.	parseInt('25px') ->	25
// parseFloat()	Lee n√∫meros con decimales. Si hay letras, corta ah√≠.	parseFloat('25.5px') ->	25.5

console.log(Number("25.5px"));
console.log(parseInt("25.5px"));
console.log(parseFloat("25.5px"));

console.log(Number("hola"));
console.log(parseInt("hola"));
console.log(parseFloat("hola"));

// üß† Casos clave donde te sirve cada uno:

// Number() ‚Üí Si sab√©s que el string deber√≠a ser un n√∫mero puro (sin unidades, sin cosas raras).
// parseInt() ‚Üí Si esper√°s n√∫meros enteros y tal vez vengan con algo m√°s ('100px').
// parseFloat() ‚Üí Si esper√°s n√∫meros con decimales y pueden venir con algo m√°s ('12.5kg').